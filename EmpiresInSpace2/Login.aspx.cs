using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;

namespace EmpiresInSpace
{
    public partial class login : System.Web.UI.Page
    {


        private void LoginDemoUser(int demoUserId)
        {
            this.SetSession(demoUserId);
            

            int i = ((Users)Session["user"]).id;
            if (Response.IsClientConnected) //example from msdn
            {
                // If still connected, redirect
                // to another page. 
                string newUrl = ResolveUrl("Galaxy.aspx");
                Response.Redirect(newUrl, false);
                Context.ApplicationInstance.CompleteRequest();
            }
            else
            {
                // If the browser is not connected
                // stop all response processing.
                Response.End();
                return;
            }
        }

        private bool Registeruser(int demoUserId, string startingRegion = null)
        {
            SpacegameServer.BC.BusinessConnector bc = (SpacegameServer.BC.BusinessConnector)Application["bs"];
            if (bc.userRegisterUser(demoUserId, startingRegion, true ))
            {
                this.SetSession(demoUserId);
                Response.Redirect("Galaxy.aspx");
                return true;
            }
            return false;
        }

        private bool DemoLoginCreate(int demoUserId)
        {
            SpacegameServer.BC.BusinessConnector bc = (SpacegameServer.BC.BusinessConnector)Application["bs"];
            //check if demoUser is really part of the game. If not, go to user creation routine                
            if (bc.UserExists(demoUserId))
            {
                LoginDemoUser(demoUserId);
                return true;
            }
            else
            {
                var StartingRegion = Application["StartingRegion"];
                if (Registeruser(demoUserId, StartingRegion != null ? StartingRegion.ToString() : null))
                {
                    return true;
                }
            }

            return false;
        }

        private void SetSession(int userid)
        {
            SpacegameServer.Core.Core.Instance.writeToLog("Page_Load() 10 Set Session " + userid.ToString());
            Session["user"] = new Users(userid);
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            //There are three sources which userId to take:
            //1) userId provided manually in a demo environment in the settings panel
            //2) Demo userId from thw Web.config file
            //3) userId generated by using the logincode from the index page (standard login)

            //in Demo games, a new user may be saved in the DemoId field. If yes, delete the previous session
            var CachedIdObj = Application["DemoId"];
            if (CachedIdObj != null)
            {
                Session["user"] = null;
            }

            //check if session variable already exists. If yes, user is already correctly logged in and may go to the game
            if (Session["user"] != null)
            {
                if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("Page_Load() 10 Response.Redirect(Galaxy.aspx); "); }
                Response.Redirect("Galaxy.aspx");
                return;
            }

            //read demouser to force login to a specific user (for debugging)
            string demoUser = System.Web.Configuration.WebConfigurationManager.AppSettings["demoUser"].ToString();
            int demoUserId = 0;
            Int32.TryParse(demoUser, out demoUserId);
            SpacegameServer.BC.BusinessConnector bc = (SpacegameServer.BC.BusinessConnector)Application["bs"];

            if (demoUserId > 0)
            {
                if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("Page_Load() 20 demoUserId " + demoUser); }
                //Try to override with the manually entered value from Application["DemoId"]
                if (CachedIdObj != null)
                {
                    int CachedId = (int)CachedIdObj;
                    //demoUserId = CachedId;

                    if (!DemoLoginCreate(CachedId))
                    {
                        DemoLoginCreate(demoUserId);
                    }
                    return;
                }

                DemoLoginCreate(demoUserId);
                return;
            }



            //check if user is already logged in (via index page - comparison of loginCode and last hour)
            //checks game db
            string loginCode = "";
            if (Request.Params["login"] != null)
                loginCode = Request.Params["login"];

            if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("Page_Load() 30 checkLogin " + loginCode); }
            checkLogin(loginCode);
            if (Session["user"] != null)
            {
                if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("Page_Load() 40 Redirect "); }
                Response.Redirect("Galaxy.aspx");
                return;
            }

            //check if ip is part of index, and if registration can take place
            //also just logs in if player is already registered
            int userId = 0;
            if (checkIndexLogin(ref userId, loginCode))
            {
                if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("Page_Load() 50 userRegisterUser " + userId.ToString() + " |  " + loginCode); }
                if (bc.userRegisterUser(userId))
                {
                    this.SetSession(userId);
                    Response.Redirect("Galaxy.aspx");
                }
                return;
            }


            /*
            //Demo with fixed user
            //loginTest();                                    
            string demoUser = System.Web.Configuration.WebConfigurationManager.AppSettings["demoUser"].ToString();
            if (demoUser == "demo")                 
            {
                int userId2;
                

                SpacegameServer.BC.BusinessConnector bc = (SpacegameServer.BC.BusinessConnector)Application["bs"];
                userId2 = bc.userCreateDemoUser(Request.UserHostAddress, userLanguage());

                if (userId2 != null && userId != 0)
                {
                    this.SetSession(userId2);
                    Response.Redirect("Galaxy.aspx");
                    return; 
                }                
            }

            if (demoUser == "demoPrePlayed")
            {
                //Load Id of a demo user that was not already tested by a visitor
                SqlConnection conn;
                string activeConnection = System.Web.Configuration.WebConfigurationManager.AppSettings["activeConnection"].ToString();
                string ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings[activeConnection].ConnectionString;
                conn = new SqlConnection(ConnectionString);

                try
                {
                    // 2. Open the connection
                    conn.Open();

                    //gets the userid for the ip-address. the ip-address has to have a logged-in date not smaller than an hour ago...
                    string query = "[dbo].[demoLoadUser]";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    cmd.CommandType = CommandType.StoredProcedure;

                    SqlParameter param2 = new SqlParameter();
                    param2.ParameterName = "@userIp";
                    param2.Value = Request.UserHostAddress;
                    cmd.Parameters.Add(param2);

                    SqlParameter langShortname = new SqlParameter();
                    langShortname.ParameterName = "@langShortname";
                    langShortname.Value = userLanguage();
                    cmd.Parameters.Add(langShortname);

                    SqlParameter param4 = new SqlParameter("@userId", SqlDbType.Int);
                    param4.Direction = ParameterDirection.Output;
                    param4.Value = 0;
                    cmd.Parameters.Add(param4);

                    cmd.ExecuteNonQuery();

                    int userId3;
                    if (Int32.TryParse(param4.Value.ToString(), out userId3) && userId3 != 0)
                    {
                        this.SetSession(userId3);
                    }

                    conn.Close();
                }
                finally
                {
                    // Close the connection
                    if (conn != null)
                    {
                        conn.Close();
                    }
                }

                Response.Redirect("Galaxy.aspx");
                return;
            }

            int demoUserId = 0;
            Int32.TryParse(demoUser, out demoUserId);
            if (demoUserId > 0)
            {
                this.SetSession(demoUserId); 

                int i = ((Users)Session["user"]).id;
                if (Response.IsClientConnected)
                {
                    // If still connected, redirect
                    // to another page. 
                    string newUrl = ResolveUrl("game.aspx");
                    Response.Redirect(newUrl, false);
                    Context.ApplicationInstance.CompleteRequest();
                }
                else
                {
                    // If the browser is not connected
                    // stop all response processing.
                    Response.End();
                }

                //Response.Redirect("Galaxy.aspx");
                return;
            }
            */

            string redirectPath = System.Web.Configuration.WebConfigurationManager.AppSettings["index"].ToString();
            if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("Page_Load() 60 redirectPath " + redirectPath); }
            Response.Redirect(redirectPath);
        }


        private bool checkIndexLogin(ref int userid, string loginCode)
        {
            bool ret = false;
            string ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["onlineInSpaceIndexConnectionString"].ToString();
            SqlConnection conn = new SqlConnection(ConnectionString);

            try
            {
                // 2. Open the connection
                conn.Open();

                //gets the userid for the ip-address. the ip-address has to have a logged-in date not smaller than an hour ago...
                string query = "[dbo].[UserCheckLoggedIn]";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter param2 = new SqlParameter();
                param2.ParameterName = "@UserHostAddress";
                param2.Value = Request.UserHostAddress;
                cmd.Parameters.Add(param2);

                SqlParameter code = new SqlParameter("@code", SqlDbType.Int);
                code.Value = loginCode;
                cmd.Parameters.Add(code);

                SqlParameter param4 = new SqlParameter("@userId", SqlDbType.Int);
                param4.Direction = ParameterDirection.Output;
                param4.Value = 0;
                cmd.Parameters.Add(param4);




                cmd.ExecuteNonQuery();

                if (Int32.TryParse(param4.Value.ToString(), out userid) && userid != 0)
                {
                    ret = true;
                }
                /*
                int id;
                if (Int32.TryParse(param4.Value.ToString(), out id) && id != 0)
                {
                    this.SetSession(id); 
                }*/

                conn.Close();
            }
            finally
            {
                // Close the connection
                if (conn != null)
                {
                    conn.Close();
                }
            }

            return ret;
        }

        public string getIp()
        {
            string clientIP;
            string ip = Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            if (!string.IsNullOrEmpty(ip))
            {
                string[] ipRange = ip.Trim().Split(',');
                clientIP = ipRange[0];
                //string[] ipRange2 = clientIP.Split(':');
                //clientIP = ipRange2[0];
            }
            else
                clientIP = Request.ServerVariables["REMOTE_ADDR"];


            return clientIP;
        }

        private void checkLogin(string loginCode)
        {
            /*
            string ip = Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("checkLogin() 1 Request.ServerVariables[HTTP_X_FORWARDED_FOR] " + ip); }
            // If there is no proxy, get the standard remote address
            if ((ip == null) || (ip == "") || (ip.ToLower() == "unknown"))
            {
                ip = Request.ServerVariables["REMOTE_ADDR"];
                if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("checkLogin() 2 Request.ServerVariables[REMOTE_ADDR] " + ip); }
            }
            
            int loop1, loop2;
            System.Collections.Specialized.NameValueCollection coll;

            // Load ServerVariable collection into NameValueCollection object.
            coll = Request.ServerVariables;
            // Get names of all keys into a string array. 
            String[] arr1 = coll.AllKeys;
            for (loop1 = 0; loop1 < arr1.Length; loop1++)
            {
                if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("checkLogin() 3 ServerVariables Key " + arr1[loop1] ); }
                //Response.Write("Key: " + arr1[loop1] + "<br>");
                String[] arr2 = coll.GetValues(arr1[loop1]);
                for (loop2 = 0; loop2 < arr2.Length; loop2++)
                {
                    if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("checkLogin() 3 ServerVariables Key " + arr1[loop1] + "   Value " + loop2 + ": " + Server.HtmlEncode(arr2[loop2]) ); }
                    //Response.Write("Value " + loop2 + ": " + Server.HtmlEncode(arr2[loop2]) + "<br>");
                }
            }
            
            if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("checkLogin() 5 getIp() " + getIp()); }
            */
            SqlConnection conn;
            string activeConnection = System.Web.Configuration.WebConfigurationManager.AppSettings["activeConnection"].ToString();
            string ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings[activeConnection].ConnectionString;
            conn = new SqlConnection(ConnectionString);

            try
            {
                // 2. Open the connection
                conn.Open();

                if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("checkLogin() 10 loginCode " + loginCode); }
                if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("checkLogin() 20 Request.UserHostAddress " + Request.UserHostAddress); }
                if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("checkLogin() 21 HttpContext.Current.Request.UserHostAddress " + HttpContext.Current.Request.UserHostAddress); }
                // if (SpacegameServer.Core.Config.Instance.DebugLogin) { SpacegameServer.Core.Core.Instance.writeToLog("checkLogin() 22 ip " + ip); }


                //gets the userid for the ip-address. the ip-address has to have a logged-in date not smaller than an hour ago...
                string query = "[dbo].[UserCheckLoggedIn]";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter param2 = new SqlParameter();
                param2.ParameterName = "@UserHostAddress";
                if (String.IsNullOrEmpty(loginCode))
                {
                    param2.Value = Request.UserHostAddress;
                }
                else
                {
                    param2.Value = loginCode;
                }
                cmd.Parameters.Add(param2);

                SqlParameter param4 = new SqlParameter("@userId", SqlDbType.Int);
                param4.Direction = ParameterDirection.Output;
                param4.Value = 0;
                cmd.Parameters.Add(param4);

                cmd.ExecuteNonQuery();

                int userId;
                if (Int32.TryParse(param4.Value.ToString(), out userId) && userId != 0)
                {
                    this.SetSession(userId);
                }

                conn.Close();
            }
            finally
            {
                // Close the connection
                if (conn != null)
                {
                    conn.Close();
                }
            }
        }

        public string userLanguage()
        {
            return Request.UserLanguages[0].Substring(0, 2);

        }
        protected void loginTest()
        {
            string demoUser = System.Web.Configuration.WebConfigurationManager.AppSettings["demoUser"].ToString();
            this.SetSession(Int16.Parse(demoUser));

            return;
        }


    }

    class Users
    {
        public int id;

        public Users(int _id)
        {
            id = _id;
        }
    }
}